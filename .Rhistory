m<-NULL ##initializes m (in event cachesolve not called)
y<-NULL ##initializes y variable
setcache<-function(y){
x<<-y ##caching to see if cachesolve returns a different value
m<<-NULL ##reinitialize m
}
getcache<-function() x ##gets cached matrix
setmatrix<-function(solve) m<<- solve ##inverts data in m
getmatrix<-function() m ##m stores cached matrix
list(setcache=setcache, getcache=getcache,
setmatrix=setmatrix,
getmatrix=getmatrix) ## creates list to store functions
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix() ##sets m = to cached matrix
##NewMatrix <- x$getmatrix()
##print(m)
##if(!is.null(m)){
##if m has values it returns m and prints message
## that is is getting cached values
##message("getting cached data")
##return(m)
##}
##if statement that attempts to evaluate if the matrices are equal
if(!is.null(m)){
matequal <- function(a, b)
is.matrix(a) && is.matrix(b) && dim(a) == dim(b) && all(a == b)
if (matequal(NewMatrix, matrix)) {
if (matequal(NewMatrix, matrix)) {
message("getting cached data")
return(m)
}
}
}
matrix <- x$getcache() ##if m is null it sets temporary variable to the original matrix
##inverts matrix dataset and sets m = to that value
m<-solve(matrix, ...)
x$setmatrix(m)
m ##prints m
NewMatrix <- m ##stores last value of m in newmatix
}
##functions intended to pull in a matrix, inversing said matrix
##and then caching the inverse of the matrix
##The following function handles taking a matix in and caching
makeCacheMatrix <- function(x = matrix()) {
m<-NULL ##initializes m (in event cachesolve not called)
y<-NULL ##initializes y variable
setcache<-function(y){
x<<-y ##caching to see if cachesolve returns a different value
m<<-NULL ##reinitialize m
}
getcache<-function() x ##gets cached matrix
setmatrix<-function(solve) m<<- solve ##inverts data in m
getmatrix<-function() m ##m stores cached matrix
list(setcache=setcache, getcache=getcache,
setmatrix=setmatrix,
getmatrix=getmatrix) ## creates list to store functions
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix() ##sets m = to cached matrix
##NewMatrix <- x$getmatrix()
##print(m)
##if(!is.null(m)){
##if m has values it returns m and prints message
## that is is getting cached values
##message("getting cached data")
##return(m)
##}
##if statement that attempts to evaluate if the matrices are equal
if(!is.null(m)){
matequal <- function(a, b)
is.matrix(a) && is.matrix(b) && dim(a) == dim(b) && all(a == b)
if (matequal(NewMatrix, matrix)) {
if (matequal(NewMatrix, matrix)) {
message("getting cached data")
return(m)
}
}
}
matrix <- x$getcache() ##if m is null it sets temporary variable to the original matrix
##inverts matrix dataset and sets m = to that value
m<-solve(matrix, ...)
x$setmatrix(m)
m ##prints m
NewMatrix <- m ##stores last value of m in newmatix
}
debug(cacheSolve)
## Test the Matrix Inverse program in cachematrix.R works
## Here is a matrix where we know what the inverse should be
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
# The inverse of this matrix should be
# -24  18   5
#  20 -15  -4
#  -5   4   1
# Use the functions makeCacheMatrix and cacheSolve
# check your answers match the matrix above
matrixVector <- makeCacheMatrix(exampleMatrix)
matrixVector$get()
cacheSolve(matrixVector)
cacheSolve(matrixVector)
##functions intended to pull in a matrix, inversing said matrix
##and then caching the inverse of the matrix
##The following function handles taking a matix in and caching
makeCacheMatrix <- function(x = matrix()) {
m<-NULL ##initializes m (in event cachesolve not called)
y<-NULL ##initializes y variable
setcache<-function(y){
x<<-y ##caching to see if cachesolve returns a different value
m<<-NULL ##reinitialize m
}
getcache<-function() x ##gets cached matrix
setmatrix<-function(solve) m<<- solve ##inverts data in m
getmatrix<-function() m ##m stores cached matrix
list(setcache=setcache, getcache=getcache,
setmatrix=setmatrix,
getmatrix=getmatrix) ## creates list to store functions
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix() ##sets m = to cached matrix
NewMatrix <- x$getmatrix()
##print(m)
##if(!is.null(m)){
##if m has values it returns m and prints message
## that is is getting cached values
##message("getting cached data")
##return(m)
##}
##if statement that attempts to evaluate if the matrices are equal
if(!is.null(m)){
matequal <- function(a, b)
is.matrix(a) && is.matrix(b) && dim(a) == dim(b) && all(a == b)
if (matequal(NewMatrix, matrix)) {
if (matequal(NewMatrix, matrix)) {
message("getting cached data")
return(m)
}
}
}
matrix <- x$getcache() ##if m is null it sets temporary variable to the original matrix
##inverts matrix dataset and sets m = to that value
m<-solve(matrix, ...)
x$setmatrix(m)
m ##prints m
NewMatrix <- m ##stores last value of m in newmatix
}
## Test the Matrix Inverse program in cachematrix.R works
## Here is a matrix where we know what the inverse should be
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
# The inverse of this matrix should be
# -24  18   5
#  20 -15  -4
#  -5   4   1
# Use the functions makeCacheMatrix and cacheSolve
# check your answers match the matrix above
matrixVector <- makeCacheMatrix(exampleMatrix)
matrixVector$get()
cacheSolve(matrixVector)
cacheSolve(matrixVector)
debug(cacheSolve)
## Test the Matrix Inverse program in cachematrix.R works
## Here is a matrix where we know what the inverse should be
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
# The inverse of this matrix should be
# -24  18   5
#  20 -15  -4
#  -5   4   1
# Use the functions makeCacheMatrix and cacheSolve
# check your answers match the matrix above
matrixVector <- makeCacheMatrix(exampleMatrix)
matrixVector$get()
cacheSolve(matrixVector)
cacheSolve(matrixVector)
##functions intended to pull in a matrix, inversing said matrix
##and then caching the inverse of the matrix
##The following function handles taking a matix in and caching
makeCacheMatrix <- function(x = matrix()) {
m<-NULL ##initializes m (in event cachesolve not called)
y<-NULL ##initializes y variable
setcache<-function(y){
x<<-y ##caching to see if cachesolve returns a different value
m<<-NULL ##reinitialize m
}
getcache<-function() x ##gets cached matrix
setmatrix<-function(solve) m<<- solve ##inverts data in m
getmatrix<-function() m ##m stores cached matrix
list(setcache=setcache, getcache=getcache,
setmatrix=setmatrix,
getmatrix=getmatrix) ## creates list to store functions
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix() ##sets m = to cached matrix
NewMatrix <- x$getmatrix()
##print(m)
##if(!is.null(m)){
##if m has values it returns m and prints message
## that is is getting cached values
##message("getting cached data")
##return(m)
##}
##if statement that attempts to evaluate if the matrices are equal
if(!is.null(m)){
matequal <- function(a, b)
is.matrix(a) && is.matrix(b) && dim(a) == dim(b) && all(a == b)
if (matequal(NewMatrix, matrix)) {
if (matequal(NewMatrix, matrix)) {
message("getting cached data")
return(m)
}
}
}
matrix <- x$getcache() ##if m is null it sets temporary variable to the original matrix
##inverts matrix dataset and sets m = to that value
m<-solve(matrix, ...)
x$setmatrix(m)
m ##prints m
##NewMatrix <- m ##stores last value of m in newmatix
}
## Test the Matrix Inverse program in cachematrix.R works
## Here is a matrix where we know what the inverse should be
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
# The inverse of this matrix should be
# -24  18   5
#  20 -15  -4
#  -5   4   1
# Use the functions makeCacheMatrix and cacheSolve
# check your answers match the matrix above
matrixVector <- makeCacheMatrix(exampleMatrix)
matrixVector$get()
cacheSolve(matrixVector)
cacheSolve(matrixVector)
source('C:/Users/elopez/Desktop/Data Science Coursework/R Porgramming Language/Week 3/ProgrammingAssignment2/cachematrix.R')
## Test the Matrix Inverse program in cachematrix.R works
## Here is a matrix where we know what the inverse should be
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
# The inverse of this matrix should be
# -24  18   5
#  20 -15  -4
#  -5   4   1
# Use the functions makeCacheMatrix and cacheSolve
# check your answers match the matrix above
matrixVector <- makeCacheMatrix(exampleMatrix)
matrixVector$get()
cacheSolve(matrixVector)
cacheSolve(matrixVector)
##functions intended to pull in a matrix, inversing said matrix
##and then caching the inverse of the matrix
##The following function handles taking a matix in and caching
makeCacheMatrix <- function(x = matrix()) {
m<-NULL ##initializes m (in event cachesolve not called)
y<-NULL ##initializes y variable
setcache<-function(y){
x<<-y ##caching to see if cachesolve returns a different value
m<<-NULL ##reinitialize m
}
getcache<-function() x ##gets cached matrix
setmatrix<-function(solve) m<<- solve ##inverts data in m
getmatrix<-function() m ##m stores cached matrix
list(setcache=setcache, getcache=getcache,
setmatrix=setmatrix,
getmatrix=getmatrix) ## creates list to store functions
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix() ##sets m = to cached matrix
NewMatrix <- x$getmatrix()
##print(m)
##if(!is.null(m)){
##if m has values it returns m and prints message
## that is is getting cached values
##message("getting cached data")
##return(m)
##}
##if statement that attempts to evaluate if the matrices are equal and if
if(!is.null(m)){
matequal <- function(a, b)
is.matrix(a) && is.matrix(b) && dim(a) == dim(b) && all(a == b)
if (matequal(NewMatrix, matrix)) {
if (matequal(NewMatrix, matrix)) {
message("getting cached data")
return(m)
}
}
message("getting cached data")
}
matrix <- x$getcache() ##if m is null it sets temporary variable to the original matrix
##inverts matrix dataset and sets m = to that value
m<-solve(matrix, ...)
x$setmatrix(m)
m ##prints m
##NewMatrix <- m ##stores last value of m in newmatix
}
## Test the Matrix Inverse program in cachematrix.R works
## Here is a matrix where we know what the inverse should be
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
# The inverse of this matrix should be
# -24  18   5
#  20 -15  -4
#  -5   4   1
# Use the functions makeCacheMatrix and cacheSolve
# check your answers match the matrix above
matrixVector <- makeCacheMatrix(exampleMatrix)
matrixVector$get()
cacheSolve(matrixVector)
cacheSolve(matrixVector)
##functions intended to pull in a matrix, inversing said matrix
##and then caching the inverse of the matrix
##The following function handles taking a matix in and caching
makeCacheMatrix <- function(x = matrix()) {
m<-NULL ##initializes m (in event cachesolve not called)
y<-NULL ##initializes y variable
setcache<-function(y){
x<<-y ##caching to see if cachesolve returns a different value
m<<-NULL ##reinitialize m
}
getcache<-function() x ##gets cached matrix
setmatrix<-function(solve) m<<- solve ##inverts data in m
getmatrix<-function() m ##m stores cached matrix
list(setcache=setcache, getcache=getcache,
setmatrix=setmatrix,
getmatrix=getmatrix) ## creates list to store functions
}
##function that evaluates the cached matrix and either lets user know that matrix
##was previously cached and prints or asigns matrix to variable
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix() ##sets m = to cached matrix
NewMatrix <- x$getmatrix()
##print(m)
##if statement that attempts to evaluate if the m matrix is not null and
##if m matrix is equal to its previous value then let user know that
##m has been cached and retrieving values and rint m...eles get inverse
##matrix values from makeCacheMAtrix
if(!is.null(m)){
matequal <- function(a, b)
is.matrix(a) && is.matrix(b) && dim(a) == dim(b) && all(a == b)
if (matequal(NewMatrix, matrix)) {
if (matequal(NewMatrix, matrix)) {
message("getting cached data")
return(m)
}
}
message("getting cached data")
}
matrix <- x$getcache() ##if m is null it sets temporary variable to the original matrix
##inverts matrix dataset and sets m = to that value
m<-solve(matrix, ...)
x$setmatrix(m)
m ##prints m
##NewMatrix <- m ##stores last value of m in newmatix
}
## Test the Matrix Inverse program in cachematrix.R works
## Here is a matrix where we know what the inverse should be
exampleMatrix <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
# The inverse of this matrix should be
# -24  18   5
#  20 -15  -4
#  -5   4   1
# Use the functions makeCacheMatrix and cacheSolve
# check your answers match the matrix above
matrixVector <- makeCacheMatrix(exampleMatrix)
matrixVector$get()
cacheSolve(matrixVector)
cacheSolve(matrixVector)
##functions intended to pull in a matrix, inversing said matrix
##and then caching the inverse of the matrix
##The following function handles taking a matix in and caching
makeCacheMatrix <- function(x = matrix()) {
m<-NULL ##initializes m (in event cachesolve not called)
y<-NULL ##initializes y variable
setcache<-function(y){
x<<-y ##caching to see if cachesolve returns a different value
m<<-NULL ##reinitialize m
}
getcache<-function() x ##gets cached matrix
setmatrix<-function(solve) m<<- solve ##inverts data in m
getmatrix<-function() m ##m stores cached matrix
list(setcache=setcache, getcache=getcache,
setmatrix=setmatrix,
getmatrix=getmatrix) ## creates list to store functions
}
##function that evaluates the cached matrix and either lets user know that matrix
##was previously cached and prints or asigns matrix to variable
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix() ##sets m = to cached matrix
NewMatrix <- x$getmatrix()
##print(m)
##if statement that attempts to evaluate if the m matrix is not null and
##if m matrix is equal to its previous value then let user know that
##m has been cached and retrieving values and rint m...eles get inverse
##matrix values from makeCacheMAtrix
if(!is.null(m)){
matequal <- function(a, b)
is.matrix(a) && is.matrix(b) && dim(a) == dim(b) && all(a == b)
if (matequal(NewMatrix, matrix)) {
if (matequal(NewMatrix, matrix)) {
message("getting cached data")
return(m)
}
}
message("getting cached data")
}
matrix <- x$getcache() ##if m is null it sets temporary variable to the original matrix
##inverts matrix dataset and sets m = to that value
m<-solve(matrix, ...)
x$setmatrix(m)
m ##prints m
##NewMatrix <- m ##stores last value of m in newmatix
}
# Test your code
source("cachematrix.R")
#
# generate matrix, and the inverse of the matrix.
size <- 1000 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
#
# now solve the matrix via the cache-method
#
special.matrix   <- makeCacheMatrix(mymatrix)
#
# this should take long, since it's the first go
special.solved.1 <- cacheSolve(special.matrix)
#
# this should be lightning fast
special.solved.2 <- cacheSolve(special.matrix)
#
# check if all solved matrices are identical
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
#
# should return TRUE
source('C:/Users/elopez/Desktop/Data Science Coursework/R Porgramming Language/Week 3/ProgrammingAssignment2/cachematrix.R')
# Test your code
source("cachematrix.R")
#
# generate matrix, and the inverse of the matrix.
size <- 1000 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
#
# now solve the matrix via the cache-method
#
special.matrix   <- makeCacheMatrix(mymatrix)
#
# this should take long, since it's the first go
special.solved.1 <- cacheSolve(special.matrix)
#
# this should be lightning fast
special.solved.2 <- cacheSolve(special.matrix)
#
# check if all solved matrices are identical
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
#
# should return TRUE
setwd ("C:\\Users\\elopez\\Desktop\\Data Science Coursework\\Getting and Cleaning Data\\Week 3")
filespath <- file.path("./data" , "UCI HAR Dataset")
#Read Test, training and features data for into R
ActivityTestData  <- read.table(file.path(filespath, "test" , "Y_test.txt" ),header = FALSE)
ActivityTrainData <- read.table(file.path(filespath, "train", "Y_train.txt"),header = FALSE)
SubjectTraindata <- read.table(file.path(filespath, "train", "subject_train.txt"),header = FALSE)
SubjectTestdata  <- read.table(file.path(filespath, "test" , "subject_test.txt"),header = FALSE)
FeaturesTestdata  <- read.table(file.path(filespath, "test" , "X_test.txt" ),header = FALSE)
FeaturesTraindata <- read.table(file.path(filespath, "train", "X_train.txt"),header = FALSE)
#merge training and test data sets into datasets for each
combinedSubjectdata <- rbind(SubjectTraindata, SubjectTestdata)
combinedActivitydata <- rbind(ActivityTrainData, ActivityTestData)
combinedFeaturesdata <- rbind(FeaturesTraindata, FeaturesTestdata)
#Create Variables out of names of the datasets in each
names(combinedSubjectdata)<-c("subject")
names(combinedActivitydata)<- c("activity")
dataFeaturesNames <- read.table(file.path(filespath, "features.txt"),head=FALSE)
names(combinedFeaturesdata)<- dataFeaturesNames$V2
#Merge the 3 combined files into one dataset
initialdatacombined <- cbind(combinedSubjectdata, combinedActivitydata)
Data <- cbind(combinedFeaturesdata, initialdatacombined)
#isolate mean and standard deviation from each measurement
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
#Bring in Activity Labels from folder
activityLabels <- read.table(file.path(filespath, "activity_labels.txt"),header = FALSE)
#give meaningful labels to variables in dataset
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
#Create a secondary tidy dataset
install.packages("plyr")
library(plyr); #loads plyr library
Datatidy<-aggregate(. ~subject + activity, Data, mean)
Datatidy<-Datatidy[order(Datatidy$subject,Datatidy$activity),]
write.table(Datatidy, file = "tidydata.txt",row.name=FALSE)
install.packages("knitr")
library(knitr)
knit2html("codebook.Rmd")
knit2html("codebook.Rmd");
str(kntr)
str(knitr)
knitr
knit2html(filespath,"codebook.Rmd");
knit2html(filespath,"codebook.Rmd");
